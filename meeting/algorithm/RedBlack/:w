## 二叉搜索树
特点是，父节点的值大于左子树的节点，小于右子树的节点，因此，使用二叉搜索树能够保证logn的查找效率，但是当二叉搜索树某一个节点的深度过深，可能就退化成一个链表，所以查找效率也会降低，所以这时候我们需要采取措施将不平衡的二叉搜索树通过旋转等方法来转换成平衡二叉树，从而保证查找效率。通常的解决办法有两种，一是AVL树，而是红黑树。
## AVL树
AVL树即平衡二叉树，其特点是任意一个节点的左右子树的深度之差不能超过1，
##红黑树的四个特性：
1. 每个节点不是红色就是黑色
2. 根节点为黑色
3. 如果节点为红，那么其子节点必须为黑
4. 任一节点到nullptr的任何路径，所含的黑节点的数目必须相同。

红黑树的平衡条件要求比AVL树低，因此，红黑树rebalance的次数比AVL树少，因此，其构建效率较高，并且，其查找效率和AVL树相差不大。所以，通常我们使用红黑树来构建一个平衡二叉树。
